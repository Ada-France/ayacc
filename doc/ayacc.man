.TH AYACC 1 "Dec 2021" "ayacc 1.3" "User Commands"
.SH NAME
ayacc \- An Ada LALR(1) parser generator
.SH SYNOPSIS
.B ayacc
[ -CEcdkrsv ] [ -D
.I directory
] [ -n
.I size
] [ -e
.I ext
]
.I grammar
.SH DESCRIPTION
.PP
.I Ayacc 
provides Ada programmers with a convenient tool for the 
automatic construction of parsers from a high level description 
of a context free grammar.
The input to
.I Ayacc
consists of a 
BNF-like specification of a grammar accompanied by a set of 
Ada program statements to be executed as each production is 
recognized.
.I Ayacc 
outputs a set of Ada program units that act as 
a parser for the specified grammar;
these program units 
may be interfaced to additional user-supplied routines to produce a 
functional program.
.PP
.I Ayacc
will produce a procedure called
.IR yyparse
and three packages:
.IR Tokens,
.IR Goto_Table,
and
.IR Shift_Reduce_Table.
All of these packages must be visible to
.IR yyparse.
Package
.IR Tokens
contains the enumeration type that is returned by the lexical analyzer.
Packages
.IR Goto_table
and
.IR Shift_Reduce_Table
contain the parsing tables used by
.IR yyparse.
.PP
The user must supply
.IR yyparse
with 
a lexical analyzer and an error reporting
routine.
The declarations of these routines should look like the following:
.IP ""
\fBfunction\fR YYLEX \fBreturn\fR Tokens.TOKEN;
.sp
\fBprocedure\fR YYERROR(MESSAGE: \fBin\fR String);

.PP 
The format of the
.I ayacc
input file must be as follows,
.IP
.nf
declarations section
%%
rules section
%%
user declarations section
.fi
.\"
.PP
The
.I declarations section 
is used to specify the generated
.I tokens 
package.
A token declaration consists of the keyword 
.I %token
followed by a list of token names that may optionally be separated 
by commas.  Token names must follow Ada enumeration type naming
conventions.  
.I Ayacc
provides a means to associate an Ada data type with a grammar symbol.
This type must be called
.I YYSType
and must be declared in the tokens declarations section and be
surrounded by '{' '}'s . e.g.
.IP
.nf
{
  subtype YYSType is Integer;
}
.fi
.PP
Since types declared in this section may require visibility to additional
packages, context clauses for the 
.I tokens
package may be defined by using the keywords
.I %with
and
.I %use.
These keywords must be located before the 
.I YYStype 
declaration.
.\"
.PP
The 
.I rules section 
defines the grammar to be parsed.
Each rules consists of a nonterminal symbol followed by
a colon and a list of grammar symbols terminated by a semicolon.
For example, a rule corresponding to a street address might be
written as,
.IP
.sp
Address: Street City ',' State Zip;
.PP
A vertical bar may be used to combine rules with identical left hand sides.
Nonterminal names may be made up of alphanumeric characters as well as
periods and underscores.  
Ada reserved words are allowed.
Unlike,
.I yacc
all tokens and nonterminal names are case insensitive.
The start symbol of the grammar may be specified using the keyword
.I %start
followed by the symbol.
If the start symbol is not specified, 
.I ayacc
will use the left hand side of the first grammar rule.
.\"
.PP
.I Ayacc
allows each grammar rule to have associated actions which are
executed whenever the rule is recognized by the parser.  An action
consists of Ada statements enclosed in braces and placed after the
body of a rule.
.I Ayacc 
uses a pseudo-variable notation to denote the values
associate values with nonterminal and token symbols.  The left hand side
of a rule may be set to a value by an assignment to the variable,
.B $$.
For example, if
.I YYSType
is an integer, the action:
.IP
.sp
A : B C D {$$ := 1;}
.PP
sets the value of A to 1.  Values of symbols on the right hand side of
the rule, may be accessed through the variables 
.B $1..$n 
,where 
.B n
refers to the nth element of the right hand side.  For example.
.IP
.sp
A : B '+' C {$$ := $1 + $3;}
.PP
sets A to the sum of the values of B and C.
.PP
The 
.I user declarations section
is optional. By default,
.I ayacc
generates a parameterless procedure,
.I YYParse.
If the user desires,
the procedure may be incorporated within a package provided in this
section.  The user must use the key marker,
.B ##,
to indicate where the body of
.I YYParse
is to be inserted.  The user is responsible for providing with
clauses for the 
.I tokens, parse table,
and
.I Text_IO
packages.
.\"
.SH OPTIONS
.TP 5
-c
Specifies the generation of a
.I
C
Lex interface.
.\"
.TP 5
-C
Disable the generation of the
.IR yyclearin
procedure (use it when
.IR yyclearin
is not used in the grammar).
.\"
.TP 5
-E
Disable the generation of the
.IR yyerrok
procedure (use it when
.IR yyerrok
is not used in the grammar).
.\"
.TP 5
-d
Specifies the production of debugging output in the generated parser.
.\"
.TP 5
-D
Write the generated files to the directory specified.
.\"
.TP 5
-k
Keep the case of symbols found in the grammar for the generation of the
.I Token
type.  The default is to convert the symbol using mixed case.
.\"
.TP 5
-r
Generate some error recovery support.
.\"
.TP 5
-s
Print statistics about the parser such as the number of shift/reduce and reduce/reduce conflicts.
.\"
.TP 5
-n size
Defines the size of the value and stack stack.  The default value is 8192.
.\"
.TP 5
-v
Produce a readable report of the states generated by the parser.
.\"
.TP 5
-e
Define the extension of the generated main file.  The default is to use
.B .adb
for the extension.
.\"
.SH FILES
.ta \w'file.shift_reduce.ada    'u
file.y	the input file to
.I Ayacc
.br
file.ada	the generated parser
.br
file.goto.ads	package
.IR Goto_Table
.br
file.shift_reduce.ads	package
.IR Shift_Reduce_Table
.br
file.tokens.ads	package
.IR Tokens
.br
file.verbose	the verbose output
.br
file.c_lex.ada	package
.IR c_lex for interfacing with lex
.br
file.h	the C include file for interfacing with lex
.\"
.SH "SEE ALSO"
Ayacc User's Manual
.br
.BR aflex (1),
.BR bison (1),
.BR flex (1),
.BR yacc (1)
