-- $Header: C:/CVSROOT/afay/ayacc/src/file_names.a,v 1.3 2004/10/23 22:04:33 Grands Exp $ 

-- Copyright (c) 1990 Regents of the University of California.
-- All rights reserved.
--
--    The primary authors of ayacc were David Taback and Deepak Tolani.
--    Enhancements were made by Ronald J. Schmalz.
--
--    Send requests for ayacc information to ayacc-info@ics.uci.edu
--    Send bug reports for ayacc to ayacc-bugs@ics.uci.edu
--
-- Redistribution and use in source and binary forms are permitted
-- provided that the above copyright notice and this paragraph are
-- duplicated in all such forms and that any documentation,
-- advertising materials, and other materials related to such
-- distribution and use acknowledge that the software was developed
-- by the University of California, Irvine.  The name of the
-- University may not be used to endorse or promote products derived
-- from this software without specific prior written permission.
-- THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
-- IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
-- WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.

-- Module       : file_names.ada
-- Component of : ayacc
-- Version      : 1.2
-- Date         : 11/21/86  12:29:16
-- SCCS File    : disk21~/rschm/hasee/sccs/ayacc/sccs/sxfile_names.ada

-- $Header: C:/CVSROOT/afay/ayacc/src/file_names.a,v 1.3 2004/10/23 22:04:33 Grands Exp $ 
-- $Log: file_names.a,v $
-- Revision 1.3  2004/10/23 22:04:33  Grands
-- no message
--
-- Revision 1.2  2004/10/22 18:31:21  Grands
-- Supports Ada95 parent/child units
--
--Revision 1.2  88/11/28  13:38:59  arcadia
--Modified Get_Unit_Name function to accept legal Ada identifiers.
--
--Revision 1.1  88/08/08  12:11:56  arcadia
--Initial revision
--

-- Revision 0,2  88/03/16  
-- Set file names modified to include a file extension parameter.

-- Revision 0.1  86/04/01  15:04:19  ada
--  This version fixes some minor bugs with empty grammars 
--  and $$ expansion. It also uses vads5.1b enhancements 
--  such as pragma inline. 
-- 
-- 
-- Revision 0.0  86/02/19  18:36:22  ada
-- 
-- These files comprise the initial version of Ayacc
-- designed and implemented by David Taback and Deepak Tolani.
-- Ayacc has been compiled and tested under the Verdix Ada compiler
-- version 4.06 on a vax 11/750 running Unix 4.2BSD.
--  
--
-- 2004/10/22 Thierry Bernier
-- + Less GNAT warnings
-- + Support for Ada95 parent/child units
--

    -- The collection of all file names used by Ayacc -- 

package Ayacc_File_Names is

    procedure Set_File_Names(Input_File, Extension: in String);
    -- Sets the initial value of the file names
    -- according to the INPUT_FILE.

    procedure Set_Parent_Unit_Name (Name : in String);
    -- Sets the name of the parent package of all yacc generated units
    -- If not called, name is derived from INPUT_FILE

    function  Get_Source_File_Name        return String;
    function  Get_Out_File_Name           return String;
    function  Get_Verbose_File_Name       return String;
    function  Get_Template_File_Name      return String;
    function  Get_Actions_File_Name       return String;
    function  Get_Shift_Reduce_File_Name  return String;
    function  Get_Goto_File_Name          return String;
    function  Get_Tokens_File_Name        return String;
-- UMASS CODES :
    function  Get_Error_Report_File_Name  return String;
    function  Get_Listing_File_Name       return String;
-- END OF UMASS CODES.
    function  Get_C_Lex_File_Name	  return String;
    function  Get_Include_File_Name	  return String;


--RJS ==========================================

  function C_Lex_Unit_Name               return String;
  function Goto_Tables_Unit_Name         return String;
  function Shift_Reduce_Tables_Unit_Name return String;
  function Tokens_Unit_Name              return String;
-- UMASS CODES :
  function Error_Report_Unit_Name        return String;
-- END OF UMASS CODES.
--RJS ==========================================


    Illegal_File_Name: exception;
    -- Raised if the file name does not end with ".y"

end Ayacc_File_Names;


with STR_Pack;
use  STR_Pack;

with String_Pkg;
package body Ayacc_File_Names is

  SCCS_ID : constant String := "@(#) file_names.ada, Version 1.2";



  Rcs_ID : constant String := "$Header: C:/CVSROOT/afay/ayacc/src/file_names.a,v 1.3 2004/10/23 22:04:33 Grands Exp $";

    Max_Name_Length : constant := 50;

    Source_File_Name       : STR(Max_Name_Length);
    Parent_Unit_Name       : STR(Max_Name_Length);
    Out_File_Name          : STR(Max_Name_Length);
    Verbose_File_Name      : STR(Max_Name_Length);
    Template_File_Name     : STR(Max_Name_Length);
    Actions_File_Name      : STR(Max_Name_Length);
    Shift_Reduce_File_Name : STR(Max_Name_Length);
    Goto_File_Name         : STR(Max_Name_Length);
    Tokens_File_Name       : STR(Max_Name_Length);
-- UMASS CODES :
    Error_Report_File_Name : STR(Max_Name_Length);
    Listing_File_Name      : STR(Max_Name_Length);
-- END OF UMASS CODES.
    C_Lex_File_Name        : STR(Max_Name_Length);
    Include_File_Name      : STR(Max_Name_Length);
 
    Error_Report_Unit      : STR(Max_Name_Length);
    Shift_Reduce_Unit      : STR(Max_Name_Length);
    Goto_Unit              : STR(Max_Name_Length);
    Tokens_Unit            : STR(Max_Name_Length);
    C_Lex_Unit             : STR(Max_Name_Length);

--RJS ==========================================



  function Get_Unit_Name (Filename : in String) return String is

    function Seek (Name : in String; This : in Character) return Natural is
      Position : Natural := Name'Last;
    begin
      while Position >= Name'First and then Name (Position) /= This loop
        Position := Position - 1;
      end loop;
      if Position >= Name'First then return Position; else return 0; end if;
    end Seek;

  -- modified to check for valid Ada identifiers. 11/28/88 kn

    --Dot_Position : Natural := Seek (Filename, '.');
    Dot_Position : Natural := Filename'Last;
    Dir_Position : Natural := Seek (Filename, '/');


    function Is_Alphabetic (Ch : in Character) return Boolean is
    begin
      return Ch in 'A' .. 'Z' or else Ch in 'a' .. 'z';
    end Is_Alphabetic;

    function Is_AlphaNum_or_Underscore (Ch : in Character) return Boolean is
    begin
      return Is_Alphabetic(Ch) or else
             Ch in '0' .. '9'  or else
             Ch = '_';
    end Is_AlphaNum_or_Underscore;

  use String_Pkg;

  begin
    if Dir_Position = 0 then
      Dir_Position := Filename'First;
    else
      Dir_Position := Dir_Position + 1;
    end if;

    if not Is_Alphabetic (Filename (Dir_Position)) then
      return "";
    else
       Check_Remaining_Characters :
       for i in Dir_Position + 1 .. Dot_Position loop
	 if not Is_AlphaNum_or_Underscore (Filename(i)) then
	   return "B" & Natural'Image(i);
	 end if;
       end loop Check_Remaining_Characters;

       return Value (Mixed (Filename (Dir_Position .. Dot_Position)));
    end if;

  end Get_Unit_Name;


  function C_Lex_Unit_Name return String is
  begin
    return Value_of (C_Lex_Unit);
  end C_Lex_Unit_Name;


  function Goto_Tables_Unit_Name return String is
  begin
    return Value_of (Goto_Unit);
  end Goto_Tables_Unit_Name;


  function Shift_Reduce_Tables_Unit_Name return String is
  begin
    return Value_of (Shift_Reduce_Unit);
  end Shift_Reduce_Tables_Unit_Name;


  function Tokens_Unit_Name return String is
  begin
    return Value_of (Tokens_Unit);
  end Tokens_Unit_Name;

-- UMASS CODES :
  function Error_Report_Unit_Name return String is
  begin
    return Value_of (Error_Report_Unit);
  end Error_Report_Unit_Name;
-- END OF UMASS CODES.

--RJS ==========================================


    function  Get_Source_File_Name return String is
    begin
	return Value_of(Source_File_Name);
    end;

    function  Get_Out_File_Name return String is
    begin
	return Value_of(Out_File_Name);
    end;

    function  Get_Verbose_File_Name return String is
    begin
	return Value_of(Verbose_File_Name);
    end;

    function  Get_Template_File_Name return String is
    begin
	return Value_of(Template_File_Name);
    end;

    function  Get_Actions_File_Name return String is
    begin
	return Value_of(Actions_File_Name);
    end;

    function  Get_Shift_Reduce_File_Name return String is
    begin
	return Value_of(Shift_Reduce_File_Name);
    end;

    function  Get_Goto_File_Name return String is
    begin
	return Value_of(Goto_File_Name);
    end;

    function  Get_Tokens_File_Name return String is
    begin
	return Value_of(Tokens_File_Name);
    end;

-- UMASS CODES :
    function  Get_Error_Report_File_Name return String is
    begin
	return Value_of(Error_Report_File_Name);
    end;

    function  Get_Listing_File_Name return String is
    begin
	return Value_of(Listing_File_Name);
    end;
-- END OF UMASS CODES.

    function Get_C_Lex_File_Name return String is
    begin
	return Value_of(C_Lex_File_Name);
    end;

    function Get_Include_File_Name return String is
    begin
	return Value_of(Include_File_Name);
    end;


    procedure Set_Units_Name (Base : in String) is
    begin
	Assign(Base & "Tokens",       To => Tokens_Unit); 
	Assign(Base & "Shift_Reduce", To => Shift_Reduce_Unit);
	Assign(Base & "Error_Report", To => Error_Report_Unit); 
        if Base(Base'Last) = '_' then
	    Assign(Base & "Goto",     To => Goto_Unit);
        else
	    Assign(Base & "Go_To",    To => Goto_Unit);
        end if;
	Assign(Base & "C_Lex",        To => C_Lex_Unit);
    end;


    procedure Set_File_Names(Input_File, Extension: in String) is
	Base: STR(Max_Name_Length);
    begin

	if Input_File'Length < 3 or else
	   (Input_File(Input_File'Last) /= 'y' and then
	    Input_File(Input_File'Last) /= 'Y') or else
	   Input_File(Input_File'Last - 1) /= '.'
	then
	    raise Illegal_File_Name;
	end if;

	Assign(Input_File(Input_File'First..Input_File'Last-2), To => Base);

	Assign(Input_File, To => Source_File_Name);

        -- TODO: strip out dirname, use basename only ?
	Assign(Base, To => Out_File_Name);
	Append(Extension, To => Out_File_Name);

	Assign(Base,       To => Verbose_File_Name);
        Append(".verbose", To => Verbose_File_Name); 

	Assign(Base,        To => Tokens_File_Name);
        Append("_tokens" & Extension, To => Tokens_File_Name); 

-- UMASS CODES :
	Assign(Base,        To => Error_Report_File_Name);
        Append("_error_report" & Extension, To => Error_Report_File_Name); 

	Assign(Base,        To => Listing_File_Name);
        Append(".lis", To => Listing_File_Name); 
-- END OF UMASS CODES.

	Assign("yyparse.template", To => Template_File_Name);

	Assign(Base,    To => Actions_File_Name);
	Append(".accs", To => Actions_File_Name);

	Assign(Base,              To => Shift_Reduce_File_Name);
	Append("_shift_reduce" & Extension, To => Shift_Reduce_File_Name);

	Assign(Base,      To => Goto_File_Name);
	Append("_goto" & Extension, To => Goto_File_Name);

	Assign(Base,       To => C_Lex_File_Name);
	Append("_c_lex" & Extension, To => C_Lex_File_Name);

	Assign(Base, To => Include_File_Name);
	Append(".h", To => Include_File_Name);

        Set_Units_Name (Get_Unit_Name (Value_Of (Base)) & "_");
    end Set_File_Names;

    procedure Set_Parent_Unit_Name (Name : in String) is
    begin
	Assign(Name, To => Parent_Unit_Name);
        Set_Units_Name (Name & ".");
    end Set_Parent_Unit_Name;

end Ayacc_File_Names;
