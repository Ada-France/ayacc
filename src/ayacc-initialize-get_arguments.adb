
with Ada.Exceptions;
with GNAT.Command_Line;
separate (Ayacc.Initialize)
procedure Get_Arguments (File           : out String_Type;
                         C_Lex          : out Switch;
                         Debug          : out Switch;
                         Summary        : out Switch;
                         Verbose        : out Switch;
                         -- UMASS CODES :
                         Error_Recovery : out Switch;
                         -- END OF UMASS CODES.
                         Extension      : out String_Type) is

   Positional     : Natural := 0;

   -- Number of positional parameters
   Total          : Natural := 0;

   -- Total number of parameters
   Max_Parameters : constant := 7;

   Incorrect_Call : exception;

   procedure Put_Help_Message is
   begin
      Put_Line (Standard_Error, "Usage: ayacc [-cdrsv] [-e ext] grammar");
      Put_Line (Standard_Error, "-c          Specifies the Generation of a 'C' Lex Interface.");
      Put_Line (Standard_Error, "-d          Specifies the Production of Debugging Output");
      Put_Line (Standard_Error, "-r          Generate error recovery");
      Put_Line (Standard_Error, "-s          Specifies the Printing of Statistics About the parser");
      Put_Line (Standard_Error, "-v          Produce readable report of states generated by the parser");
      Put_Line (Standard_Error, "-e ext      Defines the extension to be used for the generated file");
      New_Line;
   end Put_Help_Message;

begin
   C_Lex := Off;
   Debug := Off;
   Summary := Off;
   Verbose := Off;
   Error_Recovery := Off;
   Extension := Create(".adb");
   loop
      case GNAT.Command_Line.Getopt ("c d s v r: e:") is
         when ASCII.NUL =>
            exit;

         when 'c' =>
            C_Lex := On;

         when 'd' =>
            Debug := On;

         when 's' =>
            Summary := On;

         when 'v' =>
            Verbose := On;

         when 'r' =>
            Error_Recovery := On;

         when 'e' =>
            Extension := Create(GNAT.Command_Line.Parameter);

         when others =>
            Put_Help_Message;

      end case;
   end loop;

   declare
      Name : constant String := GNAT.Command_Line.Get_Argument;
   begin
      if Name = "" then
         Put_Help_Message;
         raise Illegal_Argument_List;
      end if;
      File := Create(Name);
   end;

exception
   when E : GNAT.Command_Line.Invalid_Switch =>
      Put_Line (Standard_Error, "Invalid option: " & Ada.Exceptions.Exception_Message (E));
      Put_Help_Message;
      raise Illegal_Argument_List;

end Get_Arguments;
